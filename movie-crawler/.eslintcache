[{"C:\\Users\\javedkh\\Perforce\\gitOpenSource\\2\\movie-crawler\\movie-crawler\\src\\index.tsx":"1","C:\\Users\\javedkh\\Perforce\\gitOpenSource\\2\\movie-crawler\\movie-crawler\\src\\reportWebVitals.ts":"2","C:\\Users\\javedkh\\Perforce\\gitOpenSource\\2\\movie-crawler\\movie-crawler\\src\\App.tsx":"3","C:\\Users\\javedkh\\Perforce\\gitOpenSource\\2\\movie-crawler\\movie-crawler\\src\\store\\reducers.ts":"4","C:\\Users\\javedkh\\Perforce\\gitOpenSource\\2\\movie-crawler\\movie-crawler\\src\\store\\actions.ts":"5","C:\\Users\\javedkh\\Perforce\\gitOpenSource\\2\\movie-crawler\\movie-crawler\\src\\app\\MoviesList.tsx":"6","C:\\Users\\javedkh\\Perforce\\gitOpenSource\\2\\movie-crawler\\movie-crawler\\src\\app\\Header.tsx":"7","C:\\Users\\javedkh\\Perforce\\gitOpenSource\\2\\movie-crawler\\movie-crawler\\src\\app\\Footer.tsx":"8"},{"size":646,"mtime":1609958881249,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":306,"mtime":1609958542327,"results":"12","hashOfConfig":"10"},{"size":4923,"mtime":1610011972997,"results":"13","hashOfConfig":"10"},{"size":742,"mtime":1610010401189,"results":"14","hashOfConfig":"10"},{"size":5506,"mtime":1610012986901,"results":"15","hashOfConfig":"10"},{"size":271,"mtime":1609961725694,"results":"16","hashOfConfig":"10"},{"size":287,"mtime":1609961782734,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"15qa5h2",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\javedkh\\Perforce\\gitOpenSource\\2\\movie-crawler\\movie-crawler\\src\\index.tsx",[],["36","37"],"C:\\Users\\javedkh\\Perforce\\gitOpenSource\\2\\movie-crawler\\movie-crawler\\src\\reportWebVitals.ts",[],"C:\\Users\\javedkh\\Perforce\\gitOpenSource\\2\\movie-crawler\\movie-crawler\\src\\App.tsx",[],"C:\\Users\\javedkh\\Perforce\\gitOpenSource\\2\\movie-crawler\\movie-crawler\\src\\store\\reducers.ts",["38"],"import * as actions from './actions'\r\nimport { perItem } from '../app/MoviesList'\r\n\r\ninterface BaseState {\r\n    appliedFilters: []\r\n    movies: perItem[]\r\n    filteredMovies: perItem[]\r\n    currentCount: number\r\n    lowerCount: number\r\n}\r\n\r\nconst initialState: BaseState = {\r\n    appliedFilters: [],\r\n    movies: [],\r\n    filteredMovies: [],\r\n    currentCount: 0,\r\n    lowerCount: 0\r\n}\r\n\r\nconst mainReducer = (state = initialState, action: any) => {\r\n    switch(action.type) {\r\n        case actions.LOAD_DATA:\r\n            const filteredMovies = sortMyMovies(action.payload)\r\n            let count = filteredMovies.length\r\n            let countPerPage = 20\r\n            return {\r\n                ...state,\r\n                movies: action.payload,\r\n                filteredMovies: filteredMovies.slice(0, countPerPage),\r\n                currentCount: countPerPage,\r\n                lowerCount: 0\r\n            }\r\n\r\n        case actions.SEARCH_BY_VALUE:\r\n            let newState = {...state}\r\n            let value = action.payload\r\n            let filteredValues = state.movies.filter(item => {\r\n                return item.title.toLowerCase().includes(value)\r\n            })\r\n\r\n            let appliedFilters = state.appliedFilters\r\n\r\n            if (value) {\r\n                appliedFilters = addFilterIfNotExists(actions.SEARCH_BY_VALUE, appliedFilters)\r\n                newState.filteredMovies = filteredValues\r\n\r\n            } else {\r\n                appliedFilters = removeFilter(actions.SEARCH_BY_VALUE, appliedFilters)\r\n\r\n                if (appliedFilters.length === 0) {\r\n                    newState.filteredMovies = sortMyMovies(state.movies).slice(newState.lowerCount, newState.currentCount)\r\n                }\r\n            }\r\n            return newState \r\n\r\n        case actions.SORT_BY_TITLE:\r\n            let sortByTitle = {...state}\r\n            let newfilteredMovies = [...state.filteredMovies]\r\n            let sortedTitleArr = action.payload.filterBy === 'asc' ?\r\n                newfilteredMovies.sort((a, b) => a['title'] > b['title'] ? 1 : -1) :\r\n                newfilteredMovies.sort((a, b) => a['title'] > b['title'] ? -1 : 1)\r\n\r\n                sortByTitle.filteredMovies = sortedTitleArr\r\n                sortByTitle.appliedFilters = addFilterIfNotExists(actions.SORT_BY_TITLE, sortByTitle.appliedFilters)\r\n                sortByTitle.appliedFilters = removeFilter(actions.SORT_BY_TITLE, sortByTitle.appliedFilters)\r\n\r\n            return sortByTitle\r\n\r\n        case actions.SORT_BY_YEAR:\r\n            let sortByYear = {...state}\r\n            let newfilteredMoviesByYear = [...state.filteredMovies]\r\n            let sortedYearArr = action.payload.filterBy === 'asc' ?\r\n                newfilteredMoviesByYear.sort((a, b) => a['releaseYear'] > b['releaseYear'] ? 1 : -1) :\r\n                newfilteredMoviesByYear.sort((a, b) => a['releaseYear'] > b['releaseYear'] ? -1 : 1)\r\n\r\n                sortByYear.filteredMovies = sortedYearArr\r\n                sortByYear.appliedFilters = addFilterIfNotExists(actions.SORT_BY_YEAR, sortByYear.appliedFilters)\r\n                sortByYear.appliedFilters = removeFilter(actions.SORT_BY_YEAR, sortByYear.appliedFilters)\r\n\r\n            return sortByYear\r\n\r\n        case actions.NEW_PAGE: \r\n            // get old state\r\n            let oldState = {...state}\r\n            if(action.payload.page === 1) {\r\n                let upperCount = oldState.currentCount + 20\r\n                let lowerCount = oldState.currentCount\r\n\r\n                oldState.currentCount = upperCount\r\n                oldState.lowerCount = lowerCount\r\n                const newMovies = sortMyMovies(oldState.movies)\r\n                oldState.filteredMovies = newMovies.slice(lowerCount, upperCount)\r\n            }\r\n\r\n            if(action.payload.page === -1) {\r\n                let upperCount = oldState.currentCount - 20\r\n                let lowerCount = oldState.lowerCount - 20\r\n\r\n                oldState.currentCount = upperCount\r\n                const newMovies = sortMyMovies(oldState.movies)\r\n                oldState.filteredMovies = newMovies.slice(lowerCount, upperCount)\r\n            }\r\n            return oldState\r\n\r\n        default:\r\n            return state\r\n\r\n    }\r\n}\r\n\r\nexport default mainReducer\r\n\r\n\r\nconst addFilterIfNotExists = (filter: any, appliedFilters: any) => {\r\n    let index = appliedFilters.indexOf(filter)\r\n    if (index===-1) appliedFilters.push(filter)\r\n\r\n    return appliedFilters\r\n}\r\n\r\nconst removeFilter = (filter: any, appliedFilters: any) => {\r\n    let index = appliedFilters.indexOf(filter)\r\n    appliedFilters.splice(index, 1)\r\n    return appliedFilters\r\n}\r\n\r\nconst sortMyMovies = (data: perItem[]) => {\r\n    let filteredMovies = data.filter( (movie: any) => movie.releaseYear >= 2010)\r\n    const sortAlphaNum = (a: any, b: any) => a.title.toString().localeCompare(b.title, 'en', { numeric: true })\r\n    return filteredMovies.sort(sortAlphaNum)\r\n}","C:\\Users\\javedkh\\Perforce\\gitOpenSource\\2\\movie-crawler\\movie-crawler\\src\\store\\actions.ts",[],"C:\\Users\\javedkh\\Perforce\\gitOpenSource\\2\\movie-crawler\\movie-crawler\\src\\app\\MoviesList.tsx",[],"C:\\Users\\javedkh\\Perforce\\gitOpenSource\\2\\movie-crawler\\movie-crawler\\src\\app\\Header.tsx",[],"C:\\Users\\javedkh\\Perforce\\gitOpenSource\\2\\movie-crawler\\movie-crawler\\src\\app\\Footer.tsx",[],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":24,"column":17,"nodeType":"45","messageId":"46","endLine":24,"endColumn":22},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"@typescript-eslint/no-unused-vars","'count' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]